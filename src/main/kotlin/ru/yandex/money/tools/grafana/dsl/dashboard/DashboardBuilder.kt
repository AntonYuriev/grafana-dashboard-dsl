package ru.yandex.money.tools.grafana.dsl.dashboard

import ru.yandex.money.tools.grafana.dsl.DashboardElement
import ru.yandex.money.tools.grafana.dsl.annotations.Annotations
import ru.yandex.money.tools.grafana.dsl.annotations.AnnotationsBuilder
import ru.yandex.money.tools.grafana.dsl.panels.Panel
import ru.yandex.money.tools.grafana.dsl.panels.Panels
import ru.yandex.money.tools.grafana.dsl.panels.PanelsBuilder
import ru.yandex.money.tools.grafana.dsl.time.Refresh
import ru.yandex.money.tools.grafana.dsl.time.h
import ru.yandex.money.tools.grafana.dsl.time.now
import ru.yandex.money.tools.grafana.dsl.time.s
import ru.yandex.money.tools.grafana.dsl.variables.Variables
import ru.yandex.money.tools.grafana.dsl.variables.VariablesBuilder

/**
 * Dashboard builder.
 *
 * @property title Dashboard title
 *
 * @author Dmitry Komarov (komarovdmitry@yamoney.ru)
 * @since 7/21/18
 */
@DashboardElement
class DashboardBuilder(private val title: String) {

    private val panels = mutableListOf<Panel>()

    var timeRange = now - 6.h..now

    var refresh: Refresh = 30.s

    val tags = mutableListOf<String>()

    val variables = VariablesBuilder()

    var uid: String? = null

    private val annotations = AnnotationsBuilder()

    fun panels(build: PanelsBuilder.() -> Unit) {
        val builder = PanelsBuilder()
        builder.build()
        panels += builder.panels
    }

    /**
     * Builder for annotations that displayed on graphs.
     *
     * Can be used several times without any overwriting of previous created annotations.
     */
    fun annotations(build: AnnotationsBuilder.() -> Unit) {
        annotations.build()
    }

    internal fun createDashboard() = Dashboard(
        uid = uid,
        title = title,
        timeRange = timeRange,
        refresh = refresh,
        tags = Tags(tags + "autogenerated"),
        variables = Variables(variables.variables),
        panels = Panels(panels),
        annotations = Annotations(annotations.annotations)
    )
}
