package ru.yandex.money.tools.grafana.dsl.dashboard

import org.testng.annotations.Test
import ru.yandex.money.tools.grafana.dsl.dashboard
import ru.yandex.money.tools.grafana.dsl.json.set
import ru.yandex.money.tools.grafana.dsl.jsonFile
import ru.yandex.money.tools.grafana.dsl.panels.panel
import ru.yandex.money.tools.grafana.dsl.shouldEqualToJson
import ru.yandex.money.tools.grafana.dsl.time.h
import ru.yandex.money.tools.grafana.dsl.time.m
import ru.yandex.money.tools.grafana.dsl.time.now
import ru.yandex.money.tools.grafana.dsl.time.off

class DashboardBuilderTest {

    @Test
    fun `should correct create minimal example`() {
        // expect
        val minimalDashboard = dashboard("TestAutogenerated") {}

        // that
        minimalDashboard shouldEqualToJson jsonFile("MinimalDashboard.json")
    }

    @Test
    fun `should correct change time range`() {
        // expect
        val dashboard = dashboard("TestAutogenerated") {
            timeRange = now - 3.h..now
        }

        // that
        dashboard shouldEqualToJson jsonFile("DashboardWithTimeRange.json")
    }

    @Test
    fun `should set uid`() {
        // expect
        val dashboard = dashboard("TestAutogenerated") {
            uid = "component"
        }

        // that
        dashboard shouldEqualToJson jsonFile("DashboardWithUid.json")
    }

    @Test
    fun `should set false to refresh property when refresh is off`() {
        // expect
        val dashboard = dashboard("TestAutogenerated") {
            refresh = off
        }

        // that
        dashboard shouldEqualToJson jsonFile("DashboardWithOffRefresh.json")
    }

    @Test
    fun `should contains 2 tags when 1 tag added`() {
        // expect
        val dashboard = dashboard("TestAutogenerated") {
            tags += "test"
        }

        // that
        dashboard shouldEqualToJson jsonFile("DashboardWithTags.json")
    }

    @Test
    fun `should add panel to board when panels is called`() {
        // expect
        val dashboard = dashboard("TestAutogenerated") {
            panels {
                panel(title = "Test Panel") {
                    properties {
                        it["type"] = "graph"
                    }
                }
            }
        }

        // that
        dashboard shouldEqualToJson jsonFile("DashboardWithEmptyPanel.json")
    }

    @Test
    fun `should add variable when variable is created`() {
        // expect
        val dashboard = dashboard("TestAutogenerated") {
            @Suppress("UNUSED_VARIABLE")
            val variable by variables.interval(1.m, 10.m)
        }

        // that
        dashboard shouldEqualToJson jsonFile("DashboardWithVariable.json")
    }

    @Test
    fun `should create an editable dashboard`() {
        // expect
        val dashboard = dashboard("Editable dashboard") {
            editable = true
            panels {
                panel(title = "Test Panel") {
                    properties {
                        it["type"] = "graph"
                    }
                }
            }
        }

        // that
        dashboard shouldEqualToJson jsonFile("EditableDashboard.json")
    }
}